name: macOS Builds

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
    branches:
      - main  # Trigger on main branch

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install
        
      - name: Build macOS app
        run: |
          npm run build
          npx electron-forge make --platform=darwin --arch=${{ matrix.arch }}
          
      - name: Upload to GitLab
        env:
          GITLAB_TOKEN: ${{ secrets.GITLAB_API_TOKEN }}
          GITLAB_PROJECT_ID: "68182511"  # Your GitLab project ID
        run: |
          # Get version from package.json
          VERSION=$(node -e "console.log(require('./package.json').version)")
          
          # Check if release exists
          RELEASE_EXISTS=$(curl --silent --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" \
            "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/releases/v${VERSION}" | \
            jq -r '.message')
          
          # Create release if it doesn't exist
          if [[ "$RELEASE_EXISTS" == "404 Release Not Found" ]]; then
            curl --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" \
              --data "name=v${VERSION}" \
              --data "tag_name=v${VERSION}" \
              --data "description=Release v${VERSION}" \
              --data "ref=${GITHUB_SHA}" \
              --request POST "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/releases"
          fi
          
          # Find and upload DMG files
          find out/make -type f -name "*.dmg" | while read file; do
            filename=$(basename "$file")
            echo "Uploading $filename to GitLab release v${VERSION}..."
            
            # Upload file
            UPLOAD_RESPONSE=$(curl --silent --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" \
              --upload-file "$file" \
              --request POST "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/uploads")
            
            # Get URL from response
            UPLOAD_URL=$(echo $UPLOAD_RESPONSE | jq -r ".url")
            
            # Add file to release
            curl --request POST \
              --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" \
              --data "name=${filename}" \
              --data "url=${UPLOAD_URL}" \
              "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/releases/v${VERSION}/assets/links"
          done 