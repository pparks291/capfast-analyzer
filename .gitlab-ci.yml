stages:
  - prepare
  - build
  - release

variables:
  GIT_STRATEGY: clone
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  CONTAINER_BUILD_IMAGE: $CI_REGISTRY_IMAGE/builder:$CI_COMMIT_REF_SLUG
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/test:$CI_COMMIT_REF_SLUG

cache:
  paths:
    - node_modules/

.docker-login: &docker-login
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build:builder-image:
  stage: prepare
  image: docker:latest
  services:
    - docker:dind
  <<: *docker-login
  script:
    - |
      # Try to pull existing image first
      if docker pull $CONTAINER_BUILD_IMAGE; then
        echo "Found existing builder image for $CI_COMMIT_REF_SLUG, using cached version"
        exit 0
      fi
      
      echo "No existing image found for $CI_COMMIT_REF_SLUG, building new one..."
      # Build the builder image with all dependencies
      docker build -t $CONTAINER_BUILD_IMAGE -f- . <<EOF
      FROM electronuserland/builder:wine
      
      # Install system dependencies
      RUN apt-get update && apt-get install -y \
        dpkg \
        fakeroot \
        wine \
        mono-complete \
        git \
        python3 \
        make \
        g++
      
      # Set up working directory
      WORKDIR /builds
      
      # Copy package files
      COPY package*.json ./
      
      # Install npm dependencies
      RUN npm install -g electron-builder && \
          npm install
      
      # Pre-cache electron
      RUN npm install electron
      EOF
    - docker push $CONTAINER_BUILD_IMAGE
  only:
    - main

build:linux:
  stage: build
  needs:
    - build:builder-image
  image: $CONTAINER_BUILD_IMAGE
  script:
    - |
      echo "Installing dependencies..."
      npm ci
      
      echo "Building application..."
      npm run build
      
      echo "Building Linux package..."
      npx electron-builder --linux AppImage --publish never
  artifacts:
    paths:
      - dist/**/*
    expire_in: 1 week
  only:
    - main

build:windows:
  stage: build
  needs:
    - build:builder-image
  image: $CONTAINER_BUILD_IMAGE
  script:
    - |
      echo "Installing dependencies..."
      npm ci
      
      echo "Building application..."
      npm run build
      
      echo "Building Windows package..."
      npx electron-builder --windows nsis --publish never
  artifacts:
    paths:
      - dist/**/*
    expire_in: 1 week
  only:
    - main

sync-to-github:
  stage: build
  image: alpine:latest
  script:
    - apk add --no-cache git curl jq bash
    - git config --global user.email "gitlab-ci@example.com"
    - git config --global user.name "GitLab CI"
    - git remote add github "https://${GITHUB_TOKEN}@github.com/pparks291/capfast-analyzer.git" || git remote set-url github "https://${GITHUB_TOKEN}@github.com/pparks291/capfast-analyzer.git"
    - git fetch origin
    - |
      if [[ -n "$CI_COMMIT_TAG" ]]; then
        git push github "$CI_COMMIT_TAG"
      else
        git push github HEAD:main
      fi
    - |
      echo "Waiting for GitHub Actions workflow to start..."
      COMMIT_SHA=$(git rev-parse HEAD)
      echo "Looking for workflow triggered by commit: $COMMIT_SHA"
      
      # Wait for workflow to start and complete
      MAX_ATTEMPTS=24
      for i in $(seq 1 $MAX_ATTEMPTS); do
        echo "Attempt $i of $MAX_ATTEMPTS - waiting 5 seconds..."
        sleep 5
        
        # Get workflow runs for this commit
        WORKFLOW_JSON=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
          "https://api.github.com/repos/pparks291/capfast-analyzer/actions/runs?event=push&head_sha=$COMMIT_SHA")
        
        echo "Workflow response:"
        echo "$WORKFLOW_JSON" | jq '.'
        
        # Check if we got a valid response
        if [ "$(echo "$WORKFLOW_JSON" | jq -r '.message')" = "Bad credentials" ]; then
          echo "Error: Invalid GitHub token"
          exit 1
        fi
        
        WORKFLOW_ID=$(echo "$WORKFLOW_JSON" | jq -r '.workflow_runs[0].id')
        
        if [ "$WORKFLOW_ID" != "null" ] && [ -n "$WORKFLOW_ID" ]; then
          echo "Found workflow ID: $WORKFLOW_ID for commit $COMMIT_SHA"
          break
        fi
      done
      
      if [ "$WORKFLOW_ID" = "null" ] || [ -z "$WORKFLOW_ID" ]; then
        echo "No workflow found after 2 minutes"
        exit 1
      fi
      
      echo "Monitoring workflow progress..."
      MAX_MONITOR_ATTEMPTS=20  # 10 minutes maximum
      ATTEMPT=0
      while [ $ATTEMPT -lt $MAX_MONITOR_ATTEMPTS ]; do
        WORKFLOW_DATA=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
          "https://api.github.com/repos/pparks291/capfast-analyzer/actions/runs/$WORKFLOW_ID")
        
        echo "Workflow status response:"
        echo "$WORKFLOW_DATA" | jq '.'
        
        # Check if we got a valid response
        if [ "$(echo "$WORKFLOW_DATA" | jq -r '.message')" = "Bad credentials" ]; then
          echo "Error: Invalid GitHub token"
          exit 1
        fi
        
        STATUS=$(echo "$WORKFLOW_DATA" | jq -r '.status')
        CONCLUSION=$(echo "$WORKFLOW_DATA" | jq -r '.conclusion')
        
        echo "Current status: $STATUS (conclusion: $CONCLUSION)"
        
        if [ "$STATUS" = "completed" ]; then
          if [ "$CONCLUSION" = "success" ]; then
            echo "GitHub Actions workflow completed successfully!"
            
            # Create artifacts directory
            mkdir -p dist
            
            # Download macOS artifacts
            echo "Downloading macOS artifacts..."
            ARTIFACTS_URL="https://api.github.com/repos/pparks291/capfast-analyzer/actions/runs/$WORKFLOW_ID/artifacts"
            ARTIFACTS_JSON=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" "$ARTIFACTS_URL")
            
            echo "Available artifacts:"
            echo "$ARTIFACTS_JSON" | jq '.'
            
            # Check if we got a valid response
            if [ "$(echo "$ARTIFACTS_JSON" | jq -r '.message')" = "Bad credentials" ]; then
              echo "Error: Invalid GitHub token"
              exit 1
            fi
            
            # Download each artifact
            FOUND_ARTIFACTS=0
            echo "$ARTIFACTS_JSON" | jq -r '.artifacts[] | select(.name | contains("macos")) | .archive_download_url' | while read -r url; do
              if [ -n "$url" ]; then
                echo "Downloading from $url"
                if curl -L -H "Authorization: token ${GITHUB_TOKEN}" "$url" -o artifact.zip; then
                  unzip -o artifact.zip -d dist/
                  rm artifact.zip
                  FOUND_ARTIFACTS=1
                else
                  echo "Failed to download artifact from $url"
                  exit 1
                fi
              fi
            done
            
            # List downloaded files
            echo "Downloaded files in dist directory:"
            ls -la dist/
            
            if [ $FOUND_ARTIFACTS -eq 0 ]; then
              echo "No artifacts were found or downloaded"
              exit 1
            fi
            
            # Create flag file to indicate macOS builds are ready
            touch .macos_builds_ready
            break
          else
            echo "GitHub Actions workflow failed with conclusion: $CONCLUSION"
            echo "Checking workflow logs for errors..."
            
            # Get workflow logs
            JOBS_URL="https://api.github.com/repos/pparks291/capfast-analyzer/actions/runs/$WORKFLOW_ID/jobs"
            JOBS_JSON=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" "$JOBS_URL")
            
            echo "Job details:"
            echo "$JOBS_JSON" | jq '.'
            
            # Get detailed logs for each job
            echo "$JOBS_JSON" | jq -r '.jobs[] | .id' | while read -r job_id; do
              echo "Getting logs for job $job_id..."
              JOB_DETAILS=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
                "https://api.github.com/repos/pparks291/capfast-analyzer/actions/jobs/$job_id")
              
              echo "Job details:"
              echo "$JOB_DETAILS" | jq '.'
              
              # Get step details
              echo "Step details:"
              echo "$JOB_DETAILS" | jq -r '.steps[] | {
                name: .name,
                status: .status,
                conclusion: .conclusion,
                started_at: .started_at,
                completed_at: .completed_at
              }'
              
              # Get logs URL
              LOGS_URL=$(echo "$JOB_DETAILS" | jq -r '.logs_url')
              if [ -n "$LOGS_URL" ] && [ "$LOGS_URL" != "null" ]; then
                echo "Fetching logs from $LOGS_URL..."
                curl -s -H "Authorization: token ${GITHUB_TOKEN}" "$LOGS_URL" || echo "Failed to fetch logs"
              fi
            done
            
            exit 1
          fi
        fi
        
        ATTEMPT=$((ATTEMPT + 1))
        echo "Waiting 30 seconds before next check (attempt $ATTEMPT of $MAX_MONITOR_ATTEMPTS)..."
        sleep 30
      done
      
      if [ $ATTEMPT -eq $MAX_MONITOR_ATTEMPTS ]; then
        echo "Timed out waiting for workflow to complete"
        exit 1
      fi
  artifacts:
    paths:
      - dist/*.dmg
      - .macos_builds_ready
    expire_in: 1 week
  only:
    - main
    - tags

create_release:
  stage: release
  image: node:18
  needs:
    - job: build:linux
      artifacts: true
    - job: build:windows
      artifacts: true
    - job: sync-to-github
      artifacts: true
  script:
    - |
      # Verify macOS builds completed successfully
      if [ ! -f .macos_builds_ready ]; then
        echo "macOS builds were not successful"
        exit 1
      fi
    - apt-get update -y && apt-get install -y curl jq
    - |
      # Verify we have the required token
      if [ -z "${GITLAB_API_TOKEN}" ]; then
        echo "Error: GITLAB_API_TOKEN is not set"
        exit 1
      fi
      
      # Test API token permissions
      echo "Testing API token permissions..."
      AUTH_TEST=$(curl --silent --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
        "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}")
      
      if [ "$(echo "$AUTH_TEST" | jq -r '.message')" = "403 Forbidden" ]; then
        echo "Error: GITLAB_API_TOKEN does not have sufficient permissions"
        echo "Please ensure the token has api, write_repository, and release permissions"
        exit 1
      fi
      
      # Get version from package.json
      VERSION=$(node -e "console.log(require('./package.json').version)")
      echo "Processing release v${VERSION}..."
      
      # Check if release exists
      EXISTING_RELEASE=$(curl --silent --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
        "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/releases/v${VERSION}")
      
      if [ "$(echo "$EXISTING_RELEASE" | jq -r '.message')" != "404 Release Not Found" ]; then
        echo "Release v${VERSION} already exists, deleting it first..."
        DELETE_RESPONSE=$(curl --silent --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
          --request DELETE \
          "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/releases/v${VERSION}")
        
        if [ $? -ne 0 ]; then
          echo "Failed to delete existing release. Response:"
          echo "$DELETE_RESPONSE" | jq '.'
          exit 1
        fi
        echo "Existing release deleted successfully"
      fi
      
      echo "Creating release v${VERSION}..."
      
      # Create the release
      RELEASE_RESPONSE=$(curl --silent --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
        --data "name=v${VERSION}" \
        --data "tag_name=v${VERSION}" \
        --data "description=Release v${VERSION}" \
        --data "ref=${CI_COMMIT_SHA}" \
        --request POST "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/releases")
      
      # Check if release was created successfully
      if [ "$(echo "$RELEASE_RESPONSE" | jq -r '.message')" = "403 Forbidden" ]; then
        echo "Error: Failed to create release due to insufficient permissions"
        echo "Please ensure GITLAB_API_TOKEN has the 'release' permission"
        exit 1
      elif [ "$(echo "$RELEASE_RESPONSE" | jq -r '.tag_name')" != "v${VERSION}" ]; then
        echo "Failed to create release. Response:"
        echo "$RELEASE_RESPONSE" | jq '.'
        exit 1
      fi
      
      echo "Release v${VERSION} created successfully"
      
      # Function to upload and link a file to the release
      upload_and_link_file() {
        local file="$1"
        local display_name="$2"
        
        echo "Uploading $display_name..."
        
        # Upload file to GitLab project
        UPLOAD_RESPONSE=$(curl --silent \
          --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
          --form "file=@${file}" \
          "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/uploads")
        
        # Check upload response
        if [ "$(echo "$UPLOAD_RESPONSE" | jq -r '.message')" = "403 Forbidden" ]; then
          echo "Error: Failed to upload $display_name due to insufficient permissions"
          return 1
        fi
        
        # Get the full URL for the uploaded file
        UPLOAD_URL="https://gitlab.com${CI_PROJECT_PATH}$(echo "$UPLOAD_RESPONSE" | jq -r '.url')"
        
        if [ -z "$UPLOAD_URL" ] || [ "$UPLOAD_URL" = "https://gitlab.com${CI_PROJECT_PATH}null" ]; then
          echo "Failed to get upload URL for $display_name. Response:"
          echo "$UPLOAD_RESPONSE" | jq '.'
          return 1
        fi
        
        echo "File uploaded successfully, linking to release..."
        
        # Link the uploaded file to the release
        LINK_RESPONSE=$(curl --silent \
          --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
          --header "Content-Type: application/json" \
          --data "{\"name\":\"${display_name}\", \"url\":\"${UPLOAD_URL}\"}" \
          --request POST \
          "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/releases/v${VERSION}/assets/links")
        
        if [ "$(echo "$LINK_RESPONSE" | jq -r '.message')" = "403 Forbidden" ]; then
          echo "Error: Failed to link $display_name to release"
          return 1
        elif [ -z "$(echo "$LINK_RESPONSE" | jq -r '.url')" ] || [ "$(echo "$LINK_RESPONSE" | jq -r '.url')" = "null" ]; then
          echo "Failed to create link for $display_name. Response:"
          echo "$LINK_RESPONSE" | jq '.'
          return 1
        fi
        
        echo "Successfully uploaded and linked $display_name"
        return 0
      }
      
      # Upload Windows installer
      if [ -f "dist/CapFast Analyzer Setup ${VERSION}.exe" ]; then
        upload_and_link_file "dist/CapFast Analyzer Setup ${VERSION}.exe" "CapFast Analyzer Setup v${VERSION}.exe"
      fi
      
      # Upload Linux AppImage
      if [ -f "dist/CapFast Analyzer-${VERSION}.AppImage" ]; then
        upload_and_link_file "dist/CapFast Analyzer-${VERSION}.AppImage" "CapFast Analyzer v${VERSION}.AppImage"
      fi
      
      # Upload macOS Intel DMG
      if [ -f "dist/CapFast Analyzer-${VERSION}-x64.dmg" ]; then
        upload_and_link_file "dist/CapFast Analyzer-${VERSION}-x64.dmg" "CapFast Analyzer v${VERSION} (Intel).dmg"
      fi
      
      # Upload macOS Apple Silicon DMG
      if [ -f "dist/CapFast Analyzer-${VERSION}-arm64.dmg" ]; then
        upload_and_link_file "dist/CapFast Analyzer-${VERSION}-arm64.dmg" "CapFast Analyzer v${VERSION} (Apple Silicon).dmg"
      fi
      
      echo "Release creation completed!"
  only:
    - main
    - tags 