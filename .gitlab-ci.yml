stages:
  - build
  - sync
  - release

variables:
  GIT_STRATEGY: clone

cache:
  paths:
    - node_modules/

sync-to-github:
  stage: sync
  image: alpine:latest
  script:
    - apk add --no-cache git curl jq bash
    - git config --global user.email "gitlab-ci@example.com"
    - git config --global user.name "GitLab CI"
    - git remote add github "https://${GITHUB_TOKEN}@github.com/pparks291/capfast-analyzer.git" || git remote set-url github "https://${GITHUB_TOKEN}@github.com/pparks291/capfast-analyzer.git"
    - git fetch origin
    - |
      if [[ -n "$CI_COMMIT_TAG" ]]; then
        git push github $CI_COMMIT_TAG
        REF=$CI_COMMIT_TAG
      else
        git push github HEAD:main
        REF=main
      fi
    - |
      echo "Waiting for GitHub Actions workflow to start..."
      ATTEMPTS=0
      MAX_ATTEMPTS=24
      
      while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
        WORKFLOWS=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
          "https://api.github.com/repos/pparks291/capfast-analyzer/actions/runs")
        
        if [ $? -ne 0 ]; then
          echo "Failed to fetch workflows"
          exit 1
        fi
        
        WORKFLOW_ID=$(echo "$WORKFLOWS" | jq -r '.workflow_runs[0].id')
        
        if [ "$WORKFLOW_ID" != "null" ] && [ "$WORKFLOW_ID" != "" ]; then
          echo "Found workflow ID: $WORKFLOW_ID"
          break
        fi
        
        ATTEMPTS=$((ATTEMPTS + 1))
        if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
          echo "Timeout waiting for GitHub Actions workflow to start"
          exit 1
        fi
        echo "Attempt $ATTEMPTS of $MAX_ATTEMPTS - waiting 5 seconds..."
        sleep 5
      done
      
      echo "Monitoring workflow progress..."
      while true; do
        WORKFLOW_DATA=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
          "https://api.github.com/repos/pparks291/capfast-analyzer/actions/runs/${WORKFLOW_ID}")
        
        if [ $? -ne 0 ]; then
          echo "Failed to fetch workflow status"
          exit 1
        fi
        
        STATUS=$(echo "$WORKFLOW_DATA" | jq -r '.status')
        CONCLUSION=$(echo "$WORKFLOW_DATA" | jq -r '.conclusion')
        
        echo "Current status: $STATUS (conclusion: $CONCLUSION)"
        
        if [ "$STATUS" = "completed" ]; then
          if [ "$CONCLUSION" = "success" ]; then
            echo "GitHub Actions workflow completed successfully!"
            exit 0
          else
            echo "GitHub Actions workflow failed with conclusion: $CONCLUSION"
            exit 1
          fi
        elif [ "$STATUS" = "null" ] || [ "$STATUS" = "" ]; then
          echo "Invalid workflow status received"
          exit 1
        fi
        
        echo "Waiting 30 seconds before next check..."
        sleep 30
      done
  only:
    - main
    - tags

build:linux:
  image: electronuserland/builder:wine
  stage: build
  before_script:
    - apt-get update
    - apt-get install -y dpkg fakeroot
    - npm install
  script:
    - npm run build
    - npx electron-builder --linux AppImage --publish never
  artifacts:
    paths:
      - dist/**/*
    expire_in: 1 week
  only:
    - main
    - tags

build:windows:
  image: electronuserland/builder:wine
  stage: build
  before_script:
    - apt-get update
    - apt-get install -y wine mono-complete
    - npm install
  script:
    - npm run build
    - npx electron-builder --windows nsis --publish never
  artifacts:
    paths:
      - dist/**/*
    expire_in: 1 week
  only:
    - main
    - tags

create_release:
  image: node:18
  stage: release
  needs:
    - job: build:linux
      artifacts: true
    - job: build:windows
      artifacts: true
    - job: sync-to-github
      optional: true
  script:
    - apt-get update -y && apt-get install -y curl jq
    - |
      # Get version from package.json
      VERSION=$(node -e "console.log(require('./package.json').version)")
      
      # Check if release exists
      RELEASE_EXISTS=$(curl --silent --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
        "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/releases/v${VERSION}" | \
        jq -r '.message')
      
      # Create release if it doesn't exist
      if [[ "$RELEASE_EXISTS" == "404 Release Not Found" ]]; then
        curl --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
          --data "name=v${VERSION}" \
          --data "tag_name=v${VERSION}" \
          --data "description=Release v${VERSION}" \
          --data "ref=${CI_COMMIT_SHA}" \
          --request POST "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/releases"
      fi
      
      # Upload each artifact
      find dist -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.zip" \) | while read file; do
        filename=$(basename "$file")
        echo "Uploading $filename to release v${VERSION}..."
        
        # Upload file
        UPLOAD_RESPONSE=$(curl --silent --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
          --upload-file "$file" \
          --request POST "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/uploads")
        
        # Get URL from response
        UPLOAD_URL=$(echo $UPLOAD_RESPONSE | jq -r ".url")
        
        # Add file to release
        curl --request POST \
          --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
          --data "name=${filename}" \
          --data "url=${UPLOAD_URL}" \
          "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/releases/v${VERSION}/assets/links"
      done
  only:
    - main
    - tags 