stages:
  - prepare
  - build_and_sync
  - release

variables:
  GIT_STRATEGY: clone
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  CONTAINER_BUILD_IMAGE: $CI_REGISTRY_IMAGE/builder:$CI_COMMIT_REF_SLUG
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/test:$CI_COMMIT_REF_SLUG

cache:
  paths:
    - node_modules/

.job_template: &job_template
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - when: never

.docker-login: &docker-login
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build:builder-image:
  stage: prepare
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - |
      # Try to pull existing image first
      if docker pull $CONTAINER_BUILD_IMAGE; then
        echo "Found existing builder image for $CI_COMMIT_REF_SLUG, using cached version"
        exit 0
      fi
      
      echo "No existing image found for $CI_COMMIT_REF_SLUG, building new one..."
      # Build the builder image with all dependencies
      docker build -t $CONTAINER_BUILD_IMAGE -f- . <<EOF
      FROM electronuserland/builder:wine
      
      # Install system dependencies
      RUN apt-get update && apt-get install -y \
        dpkg \
        fakeroot \
        wine \
        mono-complete \
        git \
        python3 \
        make \
        g++
      
      # Set up working directory
      WORKDIR /builds
      
      # Copy package files
      COPY package*.json ./
      
      # Install npm dependencies
      RUN npm install -g electron-builder && \
          npm install
      
      # Pre-cache electron
      RUN npm install electron
      EOF
    - docker push $CONTAINER_BUILD_IMAGE
  <<: *job_template

build:linux:
  stage: build_and_sync
  needs:
    - build:builder-image
  image: $CONTAINER_BUILD_IMAGE
  script:
    - |
      echo "Installing dependencies..."
      npm ci
      
      echo "Building application..."
      npm run build
      
      echo "Building Linux package..."
      npx electron-builder --linux AppImage --publish never
  artifacts:
    paths:
      - dist/**/*
    expire_in: 1 week
  <<: *job_template

build:windows:
  stage: build_and_sync
  needs:
    - build:builder-image
  image: $CONTAINER_BUILD_IMAGE
  script:
    - |
      echo "Installing dependencies..."
      npm ci
      
      echo "Building application..."
      npm run build
      
      echo "Building Windows package..."
      npx electron-builder --windows nsis --publish never
  artifacts:
    paths:
      - dist/**/*
    expire_in: 1 week
  <<: *job_template

sync-to-github:
  stage: build_and_sync
  needs:
    - build:builder-image
  image: alpine:latest
  script:
    - apk add --no-cache git curl jq bash
    - git config --global user.email "gitlab-ci@example.com"
    - git config --global user.name "GitLab CI"
    
    # Add or update GitHub remote
    - git remote add github "https://${GITHUB_TOKEN}@github.com/pparks291/capfast-analyzer.git" || git remote set-url github "https://${GITHUB_TOKEN}@github.com/pparks291/capfast-analyzer.git"
    
    # Fetch and push
    - git fetch origin
    - |
      if [[ -n "$CI_COMMIT_TAG" ]]; then
        git push github "$CI_COMMIT_TAG"
      else
        git push github HEAD:main
      fi
    
    # Wait for GitHub Actions workflow and download artifacts
    - |
      echo "Waiting for GitHub Actions workflow to start..."
      COMMIT_SHA=$(git rev-parse HEAD)
      echo "Looking for workflow triggered by commit: $COMMIT_SHA"
      
      MAX_ATTEMPTS=24
      ATTEMPT=1
      WORKFLOW_ID=""
      
      while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
        echo "Attempt $ATTEMPT of $MAX_ATTEMPTS - waiting 5 seconds..."
        sleep 5
        
        WORKFLOW_JSON=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/pparks291/capfast-analyzer/actions/runs?head_sha=$COMMIT_SHA")
        
        echo "Workflow response:"
        echo "$WORKFLOW_JSON" | jq '.'
        
        WORKFLOW_ID=$(echo "$WORKFLOW_JSON" | jq -r '.workflow_runs[0].id')
        
        if [ "$WORKFLOW_ID" != "null" ] && [ -n "$WORKFLOW_ID" ]; then
          echo "Found workflow ID: $WORKFLOW_ID for commit $COMMIT_SHA"
          break
        fi
        
        ATTEMPT=$((ATTEMPT + 1))
      done
      
      if [ -z "$WORKFLOW_ID" ] || [ "$WORKFLOW_ID" = "null" ]; then
        echo "No workflow found after $MAX_ATTEMPTS attempts"
        exit 1
      fi
      
      echo "Monitoring workflow progress..."
      MAX_ATTEMPTS=20
      ATTEMPT=1
      
      while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
        WORKFLOW_DATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/pparks291/capfast-analyzer/actions/runs/$WORKFLOW_ID")
        
        echo "Workflow status response:"
        echo "$WORKFLOW_DATA" | jq '.'
        
        STATUS=$(echo "$WORKFLOW_DATA" | jq -r '.status')
        CONCLUSION=$(echo "$WORKFLOW_DATA" | jq -r '.conclusion')
        
        echo "Current status: $STATUS (conclusion: $CONCLUSION)"
        
        if [ "$STATUS" = "completed" ]; then
          if [ "$CONCLUSION" = "success" ]; then
            echo "GitHub Actions workflow completed successfully!"
            break
          else
            echo "GitHub Actions workflow failed with conclusion: $CONCLUSION"
            exit 1
          fi
        fi
        
        echo "Waiting 30 seconds before next check (attempt $ATTEMPT of $MAX_ATTEMPTS)..."
        sleep 30
        ATTEMPT=$((ATTEMPT + 1))
      done
      
      if [ "$STATUS" != "completed" ] || [ "$CONCLUSION" != "success" ]; then
        echo "Workflow did not complete successfully within timeout"
        exit 1
      fi
      
      # Download macOS artifacts
      echo "Downloading macOS artifacts..."
      mkdir -p dist
      cd dist
      
      # Get list of artifacts
      ARTIFACTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
        "https://api.github.com/repos/pparks291/capfast-analyzer/actions/runs/$WORKFLOW_ID/artifacts")
      
      echo "Available artifacts:"
      echo "$ARTIFACTS" | jq '.'
      
      # Download each artifact
      for url in $(echo "$ARTIFACTS" | jq -r '.artifacts[].archive_download_url'); do
        echo "Downloading from $url"
        curl -L -H "Authorization: token $GITHUB_TOKEN" "$url" -o artifact.zip
        echo "Extracting artifact.zip..."
        unzip -l artifact.zip
        unzip -o artifact.zip
        rm artifact.zip
      done
      
      cd ..
      echo "Downloaded files in dist directory:"
      ls -la dist/
      find dist/ -name "*.dmg"
      
      # Create flag file to indicate macOS builds are ready
      touch .macos-builds-ready
  artifacts:
    paths:
      - dist/*.dmg
      - .macos-builds-ready
    expire_in: 1 day
  <<: *job_template

create_release:
  stage: release
  image: node:18
  needs:
    - build:linux
    - build:windows
    - sync-to-github
  variables:
    VERSION: "1.0.0"
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - apt-get update -y && apt-get install -y curl jq
    - |
      # Verify we have the required token
      if [ -z "${GITLAB_API_TOKEN}" ]; then
        echo "Error: GITLAB_API_TOKEN is not set"
        exit 1
      fi
      
      # Test API token permissions
      echo "Testing API token permissions..."
      AUTH_TEST=$(curl --silent --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}")
      
      if [ "$(echo "$AUTH_TEST" | jq -r '.message')" = "403 Forbidden" ]; then
        echo "Error: GITLAB_API_TOKEN does not have sufficient permissions"
        echo "Please ensure the token has api, write_repository, and release permissions"
        exit 1
      fi
      
      # Get version from package.json
      VERSION=$(node -e "console.log(require('./package.json').version)")
      echo "Processing release v${VERSION}..."
      
      # Check if release exists
      EXISTING_RELEASE=$(curl --silent --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases/v${VERSION}")
      
      if [ "$(echo "$EXISTING_RELEASE" | jq -r '.message')" != "404 Release Not Found" ]; then
        echo "Release v${VERSION} already exists, deleting it first..."
        DELETE_RESPONSE=$(curl --silent --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
          --request DELETE \
          "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases/v${VERSION}")
        
        if [ $? -ne 0 ]; then
          echo "Failed to delete existing release. Response:"
          echo "$DELETE_RESPONSE" | jq '.'
          exit 1
        fi
        echo "Existing release deleted successfully"
      fi
      
      echo "Creating release v${VERSION}..."
      
      # Create the release
      RELEASE_RESPONSE=$(curl --silent --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
        --data "name=v${VERSION}" \
        --data "tag_name=v${VERSION}" \
        --data "description=Release v${VERSION}" \
        --data "ref=${CI_COMMIT_SHA}" \
        --request POST "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases")
      
      # Check if release was created successfully
      if [ "$(echo "$RELEASE_RESPONSE" | jq -r '.message')" = "403 Forbidden" ]; then
        echo "Error: Failed to create release due to insufficient permissions"
        echo "Please ensure GITLAB_API_TOKEN has the 'release' permission"
        exit 1
      elif [ "$(echo "$RELEASE_RESPONSE" | jq -r '.tag_name')" != "v${VERSION}" ]; then
        echo "Failed to create release. Response:"
        echo "$RELEASE_RESPONSE" | jq '.'
        exit 1
      fi
      
      echo "Release v${VERSION} created successfully"
      
      # List contents of dist directory
      echo "Contents of dist directory:"
      ls -la dist/
      echo "Searching for DMG files:"
      find dist/ -name "*.dmg"
      
      # Function to upload and link a file to the release
      upload_and_link_file() {
        local file="$1"
        local name="$2"
        echo "Uploading $name..."
        
        # First upload the file to GitLab project
        UPLOAD_RESPONSE=$(curl -s -H "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
          --form "file=@${file}" \
          "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/uploads")
        
        echo "Upload response:"
        echo "$UPLOAD_RESPONSE" | jq '.'
        
        # Extract the path from the upload response and construct the full URL
        UPLOAD_PATH=$(echo "$UPLOAD_RESPONSE" | jq -r '.full_path')
        if [ -z "$UPLOAD_PATH" ] || [ "$UPLOAD_PATH" = "null" ]; then
          echo "Failed to get upload path from response"
          return 1
        fi
        
        # Construct the complete asset URL using the GitLab instance URL
        ASSET_URL="${CI_SERVER_URL}${UPLOAD_PATH}"
        echo "Asset URL: ${ASSET_URL}"
        
        # Create JSON payload for the link
        JSON_PAYLOAD=$(jq -n \
          --arg name "$name" \
          --arg url "$ASSET_URL" \
          '{"name":$name,"url":$url,"link_type":"package"}')
        
        # Now create a link to the uploaded file in the release
        LINK_RESPONSE=$(curl -s -H "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
          -H "Content-Type: application/json" \
          -X POST \
          "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases/v${VERSION}/assets/links" \
          --data "$JSON_PAYLOAD")
        
        echo "Link response:"
        echo "$LINK_RESPONSE" | jq '.'
        
        if [ "$(echo "$LINK_RESPONSE" | jq -r '.message')" = "404 Not found" ]; then
          echo "Error: Failed to link asset to release. Make sure the release exists."
          return 1
        fi
        
        echo "Successfully uploaded and linked $name"
      }
      
      # Upload Windows installer
      if [ -f "dist/CapFast Analyzer Setup ${VERSION}.exe" ]; then
        upload_and_link_file "dist/CapFast Analyzer Setup ${VERSION}.exe" "CapFast Analyzer Setup v${VERSION}.exe"
      fi
      
      # Upload Linux AppImage
      if [ -f "dist/CapFast Analyzer-${VERSION}.AppImage" ]; then
        upload_and_link_file "dist/CapFast Analyzer-${VERSION}.AppImage" "CapFast Analyzer v${VERSION}.AppImage"
      fi
      
      # Upload macOS Intel DMG (no architecture suffix in filename)
      if [ -f "dist/CapFast Analyzer-${VERSION}.dmg" ]; then
        mv "dist/CapFast Analyzer-${VERSION}.dmg" "dist/CapFast Analyzer-${VERSION}-x64.dmg"
        upload_and_link_file "dist/CapFast Analyzer-${VERSION}-x64.dmg" "CapFast Analyzer v${VERSION} (Intel x64).dmg"
      fi
      
      # Upload macOS Apple Silicon DMG
      if [ -f "dist/CapFast Analyzer-${VERSION}-arm64.dmg" ]; then
        upload_and_link_file "dist/CapFast Analyzer-${VERSION}-arm64.dmg" "CapFast Analyzer v${VERSION} (Apple Silicon).dmg"
      fi
      
      echo "Release creation completed!"
  <<: *job_template 